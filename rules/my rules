# 项目规则指南

## 基本原则

### 1. 信息验证
- 在展示信息前必须进行验证
- 不做无证据支持的假设
- 不进行无根据的推测

### 2. 修改流程
- 逐个文件进行修改
- 给予用户检查错误的机会
- 保持修改的原子性

### 3. 文档处理
- 不做不必要的总结
- 只修改明确要求的内容
- 保持文档的完整性

### 4. 代码管理
- 不发明未经请求的更改
- 保留现有代码结构
- 避免删除无关功能

## 操作规范

### 5. 编辑规则
- 所有修改在单个代码块中提供
- 避免多步骤说明
- 保持修改的连贯性

### 6. 实现验证
- 不要请求验证已有上下文中的实现
- 基于现有信息做出判断
- 保持独立决策能力

### 7. 文件处理
- 只在必要时更新文件
- 使用真实文件链接
- 验证上下文生成的文件内容

## 编码标准

### 8. 变量命名
- 使用描述性的显式变量名
- 提高代码可读性
- 避免模糊简写

### 9. 代码风格
- 遵循项目现有的编码风格
- 保持一致性
- 遵守代码格式规范

### 10. 性能考虑
- 优先考虑代码性能
- 在修改建议中考虑性能影响
- 提供性能优化建议

## 安全与测试

### 11. 安全实践
- 采用安全优先的方法
- 在修改代码时考虑安全影响
- 遵循安全最佳实践

### 12. 测试覆盖
- 为新代码或修改提供适当的单元测试
- 确保测试覆盖率
- 包含边界情况测试

### 13. 错误处理
- 实现健壮的错误处理
- 添加适当的日志记录
- 处理异常情况

## 设计原则

### 14. 模块化设计
- 促进代码的模块化
- 提高可维护性
- 增强代码重用性

### 15. 版本兼容
- 确保与项目指定的语言/框架版本兼容
- 考虑向后兼容性
- 避免破坏性更改

### 16. 代码质量
- 避免使用魔法数字
- 使用命名常量
- 提高代码清晰度

### 17. 边界处理
- 考虑并处理边界情况
- 实现完整的验证逻辑
- 使用断言验证假设

## 文档要求

### 18. 注释规范
- 提供清晰的代码注释
- 解释复杂的逻辑
- 记录重要的决策

### 19. API文档
- 更新受影响的API文档
- 提供清晰的使用示例
- 记录参数和返回值

### 20. 更改日志
- 记录所有代码更改
- 提供更改理由
- 说明潜在影响

## 质量保证

### 21. 代码审查
- 遵循代码审查清单
- 确保代码质量
- 验证功能完整性

### 22. 持续集成
- 确保通过所有测试
- 维护构建稳定性
- 遵循CI/CD最佳实践