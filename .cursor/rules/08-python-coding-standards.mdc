---
description: 
globs: 
alwaysApply: true
---
# Python编码规范

## 代码风格

1. **缩进**
   - 使用4个空格作为缩进单位
   - 禁止使用制表符(Tab)
   - 缩进必须一致，特别是在复杂的嵌套结构中

2. **行长度**
   - 每行代码最大长度为88个字符
   - 长表达式应适当换行，并保持适当缩进

3. **空行**
   - 顶级函数和类定义之间空两行
   - 类中的方法定义之间空一行
   - 在相关的功能组之间可以额外添加空行以提高可读性

4. **导入**
   - 导入应当分组放置，顺序为：标准库、第三方库、本地应用/库
   - 每组之间空一行
   - 避免使用通配符导入 (`from module import *`)

## 命名规范

1. **变量命名**
   - 变量名使用小写，单词之间用下划线连接 (`snake_case`)
   - 类名使用驼峰命名法 (`CamelCase`)
   - 常量使用大写，单词之间用下划线连接 (`UPPER_SNAKE_CASE`)

2. **函数命名**
   - 函数名使用小写，单词之间用下划线连接 (`snake_case`)
   - 方法参数使用小写，单词之间用下划线连接
   - 第一个参数为实例的方法应当命名为 `self`
   - 第一个参数为类的方法应当命名为 `cls`

## 注释规范

1. **文档字符串**
   - 所有公共模块、函数、类和方法都应该有文档字符串
   - 使用三引号 (`"""`) 风格的文档字符串
   - 文档字符串应描述功能、参数、返回值和异常

2. **注释**
   - 注释应当是完整的句子
   - 使用英文或中文（保持一致）
   - 注释应解释代码的意图，而不是重复代码的行为

## 异常处理

1. **try/except 结构**
   - 只捕获你能处理的具体异常
   - 避免捕获所有异常 (`except Exception:`)
   - 确保 try/except 块的正确缩进
   - 每个 try 语句必须有对应的 except 或 finally 语句

2. **异常处理原则**
   - 使用 finally 子句进行清理
   - 记录异常信息，包括堆栈跟踪
   - 不要在异常处理中静默失败

## 工具集成

1. **代码检查工具**
   - 使用 flake8 进行代码静态分析
   - 使用 pylint 进行更全面的代码检查
   - 在提交代码前运行检查

2. **代码格式化工具**
   - 使用 black 自动格式化代码
   - 配置编辑器在保存时自动运行格式化工具
   - 使用 isort 整理导入语句

3. **版本控制集成**
   - 使用 pre-commit 钩子自动运行代码检查和格式化
   - 配置 .gitignore 文件排除不必要的文件

## 项目结构

1. **目录组织**
   - 按功能或模块组织代码
   - 测试代码放在单独的 `tests` 目录
   - 文档放在 `docs` 目录
   - 配置文件使用标准位置

2. **文件命名**
   - 使用小写字母
   - 使用下划线分隔单词
   - 使用有意义的名称
   - 避免使用特殊字符

## 开发流程

1. **代码审查**
   - 所有代码变更必须经过审查
   - 审查关注点包括：功能正确性、代码质量、测试覆盖率
   - 特别注意缩进和语法结构的正确性

2. **测试要求**
   - 新功能必须有单元测试
   - 修复bug必须有回归测试
   - 保持测试覆盖率不低于80%

3. **文档要求**
   - 更新API文档
   - 更新用户指南
   - 记录重要的实现决策
