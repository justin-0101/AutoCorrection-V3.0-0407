import sqlite3
import os

def check_db():
    db_path = 'instance/essay_correction.db'
    if not os.path.exists(db_path):
        print(f"数据库文件不存在: {db_path}")
        return

    print(f"数据库文件大小: {os.path.getsize(db_path) / 1024:.2f} KB")
    
    try:
    except Exception as e:
        logger.error(f"发生错误: {str(e)}")
        # 连接数据库
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\n=== 数据库表列表 ===")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        for table in tables:
            print(f"- {table}")
        
        print("\n=== 检查管理后台依赖的表 ===")
        required_tables = ['users', 'essays', 'membership_orders', 'website_config']
        for table in required_tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                print(f"表 {table} 存在")
            else:
                print(f"错误: 表 {table} 不存在!")
        
        # 创建缺失的表
        missing_tables = set(required_tables) - set(tables)
        if missing_tables:
            print(f"\n=== 需要创建的缺失表 ({len(missing_tables)}) ===")
            
            if 'membership_orders' in missing_tables:
                print("创建 membership_orders 表...")
                cursor.execute('''
                CREATE TABLE membership_orders (
                    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    order_number TEXT UNIQUE NOT NULL,
                    membership_type TEXT NOT NULL,
                    amount REAL NOT NULL,
                    payment_status TEXT DEFAULT 'pending',
                    payment_method TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP,
                    expiry_date DATE,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
                ''')
                conn.commit()
                print("✓ membership_orders 表创建成功")
            
            if 'website_config' in missing_tables:
                print("创建 website_config 表...")
                cursor.execute('''
                CREATE TABLE website_config (
                    config_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    config_name TEXT UNIQUE NOT NULL,
                    config_value TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                ''')
                conn.commit()
                print("✓ website_config 表创建成功")
                
                # 添加基本配置
                configs = [
                    ('site_title', '小园丁作文批改智能体'),
                    ('site_description', '智能作文批改系统'),
                    ('free_user_quota', '10'),
                    ('regular_user_monthly_quota', '300'),
                    ('premium_user_monthly_quota', '500'),
                    ('regular_user_daily_limit', '30'),
                    ('premium_user_daily_limit', '60'),
                    ('last_backup_time', '从未备份')
                ]
                
                print("添加基本配置项...")
                cursor.executemany(
                    "INSERT INTO website_config (config_name, config_value) VALUES (?, ?)",
                    configs
                )
                conn.commit()
                print("✓ 基本配置项添加成功")
        else:
            print("\n所有必需的表都已存在")
        
        # 检查users表的role字段
        print("\n=== 检查用户数据 ===")
        cursor.execute("SELECT user_id, username, role FROM users WHERE username = 'juschen'")
        user = cursor.fetchone()
        
        if user:
            user_id, username, role = user
            print(f"找到用户: ID={user_id}, 用户名={username}, 角色={role}")
            
            if role != 'admin':
                print("将juschen用户设置为admin...")
                cursor.execute("UPDATE users SET role = 'admin' WHERE username = 'juschen'")
                conn.commit()
                print("✓ 已更新juschen为管理员")
            else:
                print("✓ juschen用户已经是管理员")
        else:
            print("× 未找到juschen用户")
        
        conn.close()
        
    except Exception as e:
        print(f"检查数据库时出错: {e}")
    
    print("\n=== 检查完成 ===")
    print("如果创建了缺失的表，请重启应用后再尝试访问管理后台。")
    print("请确保退出当前登录，重新登录后再访问管理后台。")

if __name__ == "__main__":
    check_db() 