import sqlite3
import json
import os

# 连接数据库
DB_PATH = 'instance/essay_correction.db'
print(f"正在检查数据库: {os.path.abspath(DB_PATH)}")

if not os.path.exists(DB_PATH):
    print(f"数据库文件不存在: {DB_PATH}")
    exit(1)
else:
    print(f"数据库文件存在，大小: {os.path.getsize(DB_PATH) / 1024:.2f} KB")

try:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    print("成功连接到数据库")
except Exception as e:
    print(f"连接数据库失败: {e}")
    exit(1)

# 获取所有表名
print("\n===== 数据库表列表 =====")
try:
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    if tables:
        for table in tables:
            print(f"- {table[0]}")
    else:
        print("数据库中没有表")
except Exception as e:
    print(f"获取表列表失败: {e}")

print("\n===== 检查 essays 表 =====")
try:
    # 先检查表是否存在
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='essays';")
    if not cursor.fetchone():
        print("essays表不存在")
    else:
        # 获取列结构
        cursor.execute("PRAGMA table_info(essays)")
        columns_info = cursor.fetchall()
        print("essays表结构:")
        for col in columns_info:
            print(f"  {col[1]} ({col[2]})")
        
        # 获取记录数
        cursor.execute("SELECT COUNT(*) FROM essays")
        count = cursor.fetchone()[0]
        print(f"essays表中共有 {count} 条记录")
        
        if count > 0:
            cursor.execute("SELECT * FROM essays LIMIT 5")
            essays = cursor.fetchall()
            
            # 获取列名
            columns = [description[0] for description in cursor.description]
            
            for i, essay in enumerate(essays):
                print(f"\n记录 {i+1}:")
                for j, col in enumerate(columns):
                    # 限制输出长度，避免过长
                    value = str(essay[j])
                    if len(value) > 100:
                        value = value[:100] + "..."
                    print(f"  {col}: {value}")
        else:
            print("essays表为空")
except Exception as e:
    print(f"查询essays表出错: {e}")
    import traceback
    print(traceback.format_exc())

print("\n===== 检查 essay_history 表 =====")
try:
    # 先检查表是否存在
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='essay_history';")
    if not cursor.fetchone():
        print("essay_history表不存在")
    else:
        # 获取列结构
        cursor.execute("PRAGMA table_info(essay_history)")
        columns_info = cursor.fetchall()
        print("essay_history表结构:")
        for col in columns_info:
            print(f"  {col[1]} ({col[2]})")
        
        # 获取记录数
        cursor.execute("SELECT COUNT(*) FROM essay_history")
        count = cursor.fetchone()[0]
        print(f"essay_history表中共有 {count} 条记录")
        
        if count > 0:
            cursor.execute("SELECT * FROM essay_history LIMIT 5")
            history = cursor.fetchall()
            
            # 获取列名
            columns = [description[0] for description in cursor.description]
            
            for i, record in enumerate(history):
                print(f"\n记录 {i+1}:")
                for j, col in enumerate(columns):
                    # 限制输出长度，避免过长
                    value = str(record[j])
                    if len(value) > 100:
                        value = value[:100] + "..."
                    print(f"  {col}: {value}")
        else:
            print("essay_history表为空")
except Exception as e:
    print(f"查询essay_history表出错: {e}")
    import traceback
    print(traceback.format_exc())

print("\n===== 检查用户 =====")
try:
    # 先检查表是否存在
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
    if not cursor.fetchone():
        print("users表不存在")
    else:
        cursor.execute("SELECT user_id, username, user_type FROM users")
        users = cursor.fetchall()
        print(f"用户数量: {len(users)}")
        for user in users:
            print(f"用户ID: {user[0]}, 用户名: {user[1]}, 类型: {user[2]}")
except Exception as e:
    print(f"查询users表出错: {e}")
    import traceback
    print(traceback.format_exc())

# 检查特定用户的作文
print("\n===== 检查chcfyl用户的作文 =====")
try:
    # 尝试使用用户名查询
    cursor.execute("SELECT user_id FROM users WHERE username = 'chcfyl'")
    user = cursor.fetchone()
    
    if user:
        user_id = user[0]
        print(f"找到用户chcfyl，用户ID: {user_id}")
        
        # 检查essays表中的作文
        cursor.execute("SELECT COUNT(*) FROM essays WHERE user_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        print(f"在essays表中找到 {count} 条作文记录")
        
        # 检查essay_history表中的作文
        cursor.execute("SELECT COUNT(*) FROM essay_history WHERE user_id = ?", (user_id,))
        count_history = cursor.fetchone()[0]
        print(f"在essay_history表中找到 {count_history} 条作文记录")
    else:
        print("未找到用户名为chcfyl的用户")
        
        # 尝试直接使用用户名作为user_id查询
        cursor.execute("SELECT COUNT(*) FROM essays WHERE user_id = 'chcfyl'")
        count = cursor.fetchone()[0]
        print(f"在essays表中找到 {count} 条作文记录 (直接使用用户名作为user_id)")
        
        cursor.execute("SELECT COUNT(*) FROM essay_history WHERE user_id = 'chcfyl'")
        count_history = cursor.fetchone()[0]
        print(f"在essay_history表中找到 {count_history} 条作文记录 (直接使用用户名作为user_id)")
except Exception as e:
    print(f"查询chcfyl用户作文出错: {e}")
    import traceback
    print(traceback.format_exc())

conn.close()
print("\n数据库检查完成") 