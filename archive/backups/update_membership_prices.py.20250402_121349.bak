#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
更新数据库中的会员套餐价格
"""

import sqlite3
import os

# 数据库文件路径
DB_FILE = 'instance/essay_correction.db'

def update_membership_prices():
    """更新会员套餐价格"""
    print(f"开始更新会员套餐价格...")
    
    # 检查数据库文件是否存在
    if not os.path.exists(DB_FILE):
        print(f"错误: 数据库文件 {DB_FILE} 不存在!")
        return False
    
    # 连接数据库
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    try:
    except Exception as e:
        logger.error(f"发生错误: {str(e)}")
        # 检查membership_plans表是否存在
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='membership_plans'")
        if not cursor.fetchone():
            print("错误: membership_plans表不存在，请先运行create_db.py创建表结构")
            return False
        
        # 清空现有套餐数据
        cursor.execute("DELETE FROM membership_plans")
        print("已清空现有会员套餐数据")
        
        # 插入新的套餐数据
        new_plans = [
            ('月度会员', '每月订阅，享受基础会员权益', 89.9, 30, '每月300篇作文批改额度，每日30篇限制', 1),
            ('季度会员', '3个月订阅，享受更多优惠', 239.9, 90, '每月300篇作文批改额度，每日30篇限制', 1),
            ('高级会员', '高级功能与更多批改额度', 129.9, 30, '每月500篇作文批改额度，每日60篇限制', 1)
        ]
        
        cursor.executemany('''
            INSERT INTO membership_plans 
            (name, description, price, duration_days, features, active)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', new_plans)
        
        conn.commit()
        print(f"成功更新会员套餐价格: 普通会员 89.9元，高级会员 129.9元")
        
        # 查询更新后的数据
        cursor.execute("SELECT id, name, price FROM membership_plans")
        updated_plans = cursor.fetchall()
        print("\n更新后的会员套餐:")
        for plan in updated_plans:
            print(f"  ID: {plan[0]}, 名称: {plan[1]}, 价格: ¥{plan[2]}")
            
        return True
    
    except Exception as e:
        conn.rollback()
        print(f"更新会员套餐价格失败: {str(e)}")
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    update_membership_prices() 