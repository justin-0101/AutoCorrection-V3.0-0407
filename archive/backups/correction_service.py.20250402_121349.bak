#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import random
import time
import requests
from dotenv import load_dotenv

class CorrectionService:
    """文章批改服务类"""
    
    def __init__(self):
        """初始化批改服务"""
        # 加载环境变量
        load_dotenv()
        
    async def correct_essay(self, title, content):
        """
        批改文章内容
        
        参数:
            title: 文章标题
            content: 文章内容
            
        返回:
            批改结果字典
        """
        # 检查文章是否太短
        if len(content) < 50:
            return {
                "success": False,
                "error": "文章内容太短，无法进行批改",
                "score": "无法评分",
                "comments": "文章内容需要至少50个字符才能进行批改。"
            }
        
        # 模拟处理时间
        await asyncio.sleep(2)
        
        # 通过随机方式模拟批改结果
        if "无法" in title or len(content) < 100:
            return {
                "success": True,
                "score": "无法评分",
                "total_score": 0,
                "time": time.strftime("%Y-%m-%d %H:%M:%S"),
                "errors": [],
                "comments": "文章内容不足以进行完整评分，但我们可以提供以下反馈。",
                "strengths": ["文章格式正确"],
                "weaknesses": ["文章内容过短，难以全面评价"],
                "suggestions": ["尝试扩展文章内容，使其更加完整"]
            }
            
        # 随机生成一些错误
        errors = []
        if random.random() > 0.3:
            error_count = random.randint(2, 5)
            for i in range(error_count):
                error_pos = random.randint(0, len(content) - 10)
                error_char = content[error_pos:error_pos+1]
                correct_char = error_char  # 在实际应用中这里应该提供正确的字符
                errors.append({
                    "position": error_pos,
                    "error": error_char,
                    "correction": correct_char,
                    "context": content[max(0, error_pos-5):error_pos+5]
                })
        
        # 生成各项分数
        structure_score = random.randint(7, 10) if len(content) > 300 else random.randint(5, 8)
        content_score = random.randint(7, 10) if len(content) > 500 else random.randint(5, 8)
        language_score = random.randint(7, 10) if len(errors) < 3 else random.randint(4, 7)
        originality_score = random.randint(6, 10)
        
        # 计算总分
        total_score = (structure_score + content_score + language_score + originality_score) / 4
        score = str(round(total_score * 10))
        
        # 随机选择优点、缺点和建议
        strengths = random.sample([
            "文章结构清晰，层次分明",
            "语言表达流畅自然",
            "论点鲜明，论据充分",
            "用词准确，语句通顺",
            "文章主题突出，中心明确",
            "论证有力，逻辑性强",
            "段落之间过渡自然",
            "开头结尾呼应，首尾连贯"
        ], k=random.randint(2, 4))
        
        weaknesses = random.sample([
            "部分段落缺乏必要的过渡",
            "个别用词不够准确",
            "有少量语法错误",
            "部分论据缺乏说服力",
            "文章结构有待优化",
            "内容深度有待加强"
        ], k=random.randint(1, 3))
        
        suggestions = random.sample([
            "增加过渡词语，提高文章连贯性",
            "注意检查语法和拼写错误",
            "进一步充实论据，增强说服力",
            "适当增加一些生动的例子",
            "可以使用更丰富的词汇来表达观点",
            "建议进一步完善文章结构"
        ], k=random.randint(2, 3))
        
        # 生成总体评价
        comments = f"这是一篇{'优秀的' if total_score > 8 else '良好的' if total_score > 7 else '中等的'}文章。" + \
                f"文章{'结构严谨' if structure_score > 8 else '结构较为清晰'}，" + \
                f"{'内容充实' if content_score > 8 else '内容尚可'}，" + \
                f"{'语言表达流畅' if language_score > 8 else '语言表达基本通顺'}。"
        
        # 返回批改结果
        return {
            "success": True,
            "score": score,
            "total_score": total_score,
            "structure_score": structure_score,
            "content_score": content_score,
            "language_score": language_score,
            "originality_score": originality_score,
            "time": time.strftime("%Y-%m-%d %H:%M:%S"),
            "errors": errors,
            "comments": comments,
            "strengths": strengths,
            "weaknesses": weaknesses,
            "suggestions": suggestions
        } 