#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
修复app.py中的缩进错误，特别是correction函数中的问题
"""

import re
import sys
import logging

# 配置日志
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def fix_indentation_errors():
    """修复app.py中的缩进错误"""
    try:
    except Exception as e:
        logger.error(f"发生错误: {str(e)}")
        # 读取app.py文件
        logger.info("读取app.py文件...")
        with open('app.py', 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        # 创建备份
        with open('app.py.bak', 'w', encoding='utf-8') as file:
            file.writelines(lines)
            logger.info("创建备份文件 app.py.bak")
        
        # 找到correction函数的开始和结束位置
        start_line = -1
        end_line = -1
        
        for i, line in enumerate(lines):
            if "def correction():" in line:
                start_line = i
            elif start_line != -1 and line.startswith('@app.route') and i > start_line:
                end_line = i
                break
        
        if end_line == -1:  # 如果没有找到结束位置，假设它是文件的最后
            end_line = len(lines)
        
        logger.info(f"找到correction函数，从第{start_line+1}行到第{end_line}行")
        
        # 特别检查并修复"if not user_id:"后面的缩进问题
        for i in range(start_line, end_line):
            if "if not user_id:" in lines[i]:
                # 确保下一行有正确的缩进
                next_line = i + 1
                if next_line < len(lines) and not lines[next_line].startswith(" " * 16):
                    lines[next_line] = " " * 16 + lines[next_line].lstrip()
                    logger.info(f"修复了第{next_line+1}行的缩进")
            
            # 检查cursor.execute的缩进问题
            if "today = date.today().strftime('%Y-%m-%d')" in lines[i]:
                next_line = i + 1
                if next_line < len(lines) and "cursor.execute" in lines[next_line] and not lines[next_line].startswith(" " * 12):
                    lines[next_line] = " " * 12 + lines[next_line].lstrip()
                    logger.info(f"修复了第{next_line+1}行的缩进")
            
            # 修复"if not subject:"后面的缩进问题
            if "if not subject:" in lines[i] and "尝试从内容的第一行提取" in lines[i]:
                # 检查else的缩进
                for j in range(i+1, min(i+10, end_line)):
                    if "else:" in lines[j] and not lines[j].startswith(" " * 12):
                        lines[j] = " " * 12 + lines[j].lstrip()
                        logger.info(f"修复了第{j+1}行的缩进")
                        
                        # 修复else下面的缩进
                        if j+1 < len(lines) and not lines[j+1].startswith(" " * 16):
                            lines[j+1] = " " * 16 + lines[j+1].lstrip()
                            logger.info(f"修复了第{j+2}行的缩进")
            
            # 修复"essay_id = cursor.lastrowid"的缩进
            if "essay_id = cursor.lastrowid" in lines[i] and not lines[i].startswith(" " * 12):
                lines[i] = " " * 12 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
            
            # 修复"connection.commit()"的缩进
            if "connection.commit()" in lines[i] and not lines[i].startswith(" " * 16) and not lines[i].startswith(" " * 12):
                lines[i] = " " * 16 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
            
            # 修复"ai_result = unified_ai_scoring"的缩进
            if "ai_result = unified_ai_scoring" in lines[i] and not lines[i].startswith(" " * 20):
                lines[i] = " " * 20 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
            
            # 修复"grade ="的缩进
            if "grade = ai_result.get" in lines[i] and not lines[i].startswith(" " * 20):
                lines[i] = " " * 20 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
            
            # 修复"if len(article.strip())"的缩进
            if "if len(article.strip()) == 0" in lines[i] and not lines[i].startswith(" " * 20):
                lines[i] = " " * 20 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
                
                # 修复if语句下面的缩进
                if i+1 < len(lines) and not lines[i+1].startswith(" " * 24):
                    lines[i+1] = " " * 24 + lines[i+1].lstrip()
                    logger.info(f"修复了第{i+2}行的缩进")
            
            # 修复"spelling_errors ="的缩进
            if "spelling_errors = json.dumps" in lines[i] and not lines[i].startswith(" " * 20):
                lines[i] = " " * 20 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
            
            # 修复"cursor.execute(UPDATE essays"的缩进
            if "cursor.execute(\"\"\"" in lines[i] and "UPDATE essays" in lines[i+1] and not lines[i].startswith(" " * 20):
                lines[i] = " " * 20 + lines[i].lstrip()
                logger.info(f"修复了第{i+1}行的缩进")
        
        # 写入修复后的文件
        with open('app.py', 'w', encoding='utf-8') as file:
            file.writelines(lines)
        
        logger.info("完成修复！应用程序文件已更新。")
        return True
    
    except Exception as e:
        logger.error(f"修复过程中出错: {str(e)}")
        return False

if __name__ == "__main__":
    fix_indentation_errors() 