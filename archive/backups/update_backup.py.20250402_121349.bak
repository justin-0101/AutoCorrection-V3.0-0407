#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
更新备份文件夹中的特定文件，包括最新的修改
"""

import os
import shutil
from datetime import datetime

def update_backup():
    """更新备份文件夹中的特定文件"""
    # 备份目录
    backup_dir = r"D:\git-justin0101\auto-currection\AutoCorrection-V2.0-Backup-Before-Refactor"
    if not os.path.exists(backup_dir):
        print(f"错误: 备份目录 {backup_dir} 不存在!")
        return False
    
    # 生成时间戳
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # 要更新的文件列表
    files_to_update = [
        'app.py',               # 包含日期格式处理的修复
        'create_backup.py',     # 新添加的备份脚本
        'create_db.py'          # 会员计划相关修改
    ]
    
    # 更新文件
    updated_files = []
    for file in files_to_update:
        source_file = file
        if not os.path.exists(source_file):
            print(f"警告: 源文件 {source_file} 不存在，跳过...")
            continue
        
        # 备份目标文件夹中的同名文件（如果存在）
        target_file = os.path.join(backup_dir, file)
        if os.path.exists(target_file):
            backup_file = os.path.join(backup_dir, f"{file}.{timestamp}.bak")
            try:
            except Exception as e:
                logger.error(f"发生错误: {str(e)}")
                shutil.copy2(target_file, backup_file)
                print(f"已创建备份: {backup_file}")
            except Exception as e:
                print(f"备份原文件失败: {str(e)}")
        
        # 复制新文件到备份目录
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            shutil.copy2(source_file, target_file)
            updated_files.append(file)
            print(f"已更新: {target_file}")
        except Exception as e:
            print(f"更新文件失败 {file}: {str(e)}")
    
    # 创建更新记录
    update_log = os.path.join(backup_dir, f"update_log_{timestamp}.txt")
    with open(update_log, 'w', encoding='utf-8') as f:
        f.write(f"备份更新时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"更新文件: {', '.join(updated_files)}\n")
        f.write("备注: 包含会员中心页面日期格式处理的修复\n")
    
    print(f"\n备份更新完成! 更新日志: {update_log}")
    print(f"已更新 {len(updated_files)}/{len(files_to_update)} 个文件")
    return True

if __name__ == "__main__":
    update_backup() 