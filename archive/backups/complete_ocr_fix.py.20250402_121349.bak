#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import base64
import json
import tempfile
import requests
from PIL import Image
import traceback
import time

class OcrService:
    """OCR服务封装类，支持多种OCR方法"""
    
    def __init__(self):
        """初始化OCR服务"""
        # 尝试导入pytesseract，如果安装了的话
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            import pytesseract
            self.pytesseract = pytesseract
            self.tesseract_available = True
        except ImportError:
            self.pytesseract = None
            self.tesseract_available = False
            print("警告: pytesseract未安装，本地OCR功能不可用")
            
    def process_image(self, image_path, method="mock"):
        """
        处理图像并提取文本
        
        参数:
            image_path: 图像文件路径
            method: OCR方法，可选值: "qwen", "tesseract", "mock"
            
        返回:
            提取的文本和状态信息的字典
        """
        result = {
            "success": False,
            "text": "",
            "method": method,
            "error": None
        }
        
        # 检查图像是否存在
        if not os.path.exists(image_path):
            result["error"] = f"图像文件不存在: {image_path}"
            return result
        
        # 预处理图像
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            processed_image_path = self._preprocess_image(image_path)
            result["processed_image"] = processed_image_path
        except Exception as e:
            result["error"] = f"图像预处理失败: {str(e)}"
            return result
        
        # 根据方法选择OCR处理
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            if method == "qwen":
                text = self._ocr_qwen(processed_image_path)
            elif method == "tesseract":
                text = self._ocr_tesseract(processed_image_path)
            elif method == "mock":
                text = self._ocr_mock(processed_image_path)
            else:
                # 默认使用模拟数据
                text = self._ocr_mock(processed_image_path)
                
            if text:
                result["success"] = True
                result["text"] = text
            else:
                result["error"] = "OCR处理未返回文本"
                
        except Exception as e:
            result["error"] = f"OCR处理失败: {str(e)}"
            traceback.print_exc()
            
        # 清理临时文件
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            if os.path.exists(processed_image_path) and processed_image_path != image_path:
                os.remove(processed_image_path)
        except:
            pass
            
        return result
    
    def _preprocess_image(self, image_path):
        """
        预处理图像以提高OCR效果
        
        参数:
            image_path: 原始图像路径
            
        返回:
            处理后的图像路径
        """
        # 打开图像
        image = Image.open(image_path)
        
        # 转换为RGB模式
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # 创建临时文件
        temp_path = f"{image_path}_temp.jpg"
        
        # 保存处理后的图像
        image.save(temp_path, 'JPEG', quality=95)
        image.close()
        
        return temp_path
    
    def _ocr_qwen(self, image_path):
        """
        使用阿里千问VL模型进行OCR
        
        参数:
            image_path: 图像路径
            
        返回:
            提取的文本
        """
        # API密钥检查
        api_key = os.environ.get("DASHSCOPE_API_KEY")
        if not api_key:
            print("警告: DASHSCOPE_API_KEY环境变量未设置，尝试使用默认值")
            api_key = "sk-08ab6424a0654b1bb399758e873d0422"  # 使用默认值
            
        model = os.environ.get("DASHSCOPE_MODEL", "qwen-vl-max")
        
        print(f"使用千问OCR - API密钥长度: {len(api_key)}, 模型: {model}")
        
        # 读取图像文件
        with open(image_path, "rb") as f:
            image_content = f.read()
            
        # 检查图像大小
        image_size_kb = len(image_content) / 1024
        print(f"图像大小: {image_size_kb:.2f}KB")
        
        # 如果图像过大，可能导致API连接问题，尝试压缩
        max_size_kb = 4000  # 4MB是一个安全的图像大小上限
        if image_size_kb > max_size_kb:
            print(f"图像过大 ({image_size_kb:.2f}KB)，尝试压缩...")
            image = Image.open(image_path)
            
            # 计算压缩比例
            scale_factor = (max_size_kb / image_size_kb) ** 0.5
            new_width = int(image.width * scale_factor)
            new_height = int(image.height * scale_factor)
            
            # 调整图像大小
            image = image.resize((new_width, new_height), Image.LANCZOS)
            
            # 保存为临时文件
            temp_path = f"{image_path}_compressed.jpg"
            image.save(temp_path, "JPEG", quality=85)
            
            # 读取压缩后的图像
            with open(temp_path, "rb") as f:
                image_content = f.read()
                
            print(f"压缩后图像大小: {len(image_content)/1024:.2f}KB, 尺寸: {new_width}x{new_height}")
            
            # 清理临时文件
            try:
            except Exception as e:
                logger.error(f"发生错误: {str(e)}")
                os.remove(temp_path)
            except:
                pass
                
        # 转Base64
        image_base64 = base64.b64encode(image_content).decode('utf-8')
        print(f"Base64编码完成，长度: {len(image_base64)}")
        
        # API调用
        url = "https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        payload = {
            "model": model,
            "input": {
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {"image": f"data:image/jpeg;base64,{image_base64}"},
                            {"text": "识别图片中的所有文字并原样返回。请尽可能多地识别出所有文字内容，这非常重要。"}
                        ]
                    }
                ]
            },
            "parameters": {
                "result_format": "message",
                "max_tokens": 2048,  # 修改为API允许的最大值
                "temperature": 0.01,
                "top_p": 0.9
            }
        }
        
        # 设置最大重试次数和初始延迟
        max_retries = 5  # 增加到5次
        base_delay = 3  # 初始等待3秒
        
        # 尝试调用API，失败后重试
        for attempt in range(max_retries):
            try:
            except Exception as e:
                logger.error(f"发生错误: {str(e)}")
                # 计算当前重试的延迟时间
                delay = base_delay * (2 ** attempt)  # 指数退避
                
                print(f"API调用尝试 #{attempt+1}/{max_retries}...")
                print(f"请求URL: {url}")
                print(f"使用API密钥: {api_key[:4]}...{api_key[-4:]}")
                print(f"使用模型: {model}")
                
                # 发送请求，使用更长的超时时间
                response = requests.post(
                    url, 
                    headers=headers, 
                    json=payload, 
                    timeout=(30, 300),  # 连接超时30秒，响应超时300秒
                    verify=True  # 确保启用SSL验证
                )
                
                print(f"API响应状态码: {response.status_code}")
                
                if response.status_code == 200:
                    # 成功获取响应
                    result = response.json()
                    print(f"API响应内容: {json.dumps(result, ensure_ascii=False)[:300]}...")
                    
                    # 提取文本
                    content = result.get("output", {}).get("choices", [{}])[0].get("message", {}).get("content", "")
                    
                    # 检查文本内容格式：可能是字符串或列表
                    if isinstance(content, list):
                        # 如果是列表格式，提取所有文本内容并合并
                        extracted_text = ""
                        for item in content:
                            if isinstance(item, dict) and "text" in item:
                                extracted_text += item["text"]
                        content = extracted_text
                    
                    # 检查文本长度是否过短
                    if not content:
                        print("API返回结果中未找到文本内容")
                        if attempt == max_retries - 1:
                            raise Exception("API返回结果中未找到文本内容")
                        continue
                    elif len(content) < 10:  # 文本过短判断标准
                        print(f"警告: API返回的文本内容过短 (长度: {len(content)}): '{content}'")
                        # 图片可能没有文字，或者OCR识别失败，但API没有报错
                        if "无文字" in content or "没有文字" in content or "空白" in content:
                            print("图片可能不包含文字")
                            return "图片不包含文字或无法识别图片中的文字。"
                        
                        if attempt < max_retries - 1:
                            print(f"文本过短，将在 {delay} 秒后重试...")
                            time.sleep(delay)
                            continue
                    
                    print(f"成功提取文本，长度: {len(content)}")
                    print(f"文本内容前100字符: {content[:100]}")
                    return content
                    
                elif response.status_code == 401:
                    # 认证错误，不需要重试
                    print(f"API认证错误: {response.text}")
                    raise Exception(f"API调用失败，认证错误: {response.text}")
                    
                else:
                    # 其他错误，可以重试
                    print(f"API请求失败，状态码: {response.status_code}, 错误: {response.text}")
                    if attempt < max_retries - 1:
                        print(f"将在 {delay} 秒后重试...")
                        time.sleep(delay)
                    else:
                        # 最后一次尝试仍然失败
                        raise Exception(f"API调用失败，状态码: {response.status_code}，错误: {response.text}")
                
            except requests.exceptions.ConnectionError as e:
                print(f"网络连接错误: {str(e)}")
                if attempt < max_retries - 1:
                    print(f"将在 {delay} 秒后重试...")
                    time.sleep(delay)
                else:
                    raise Exception(f"API连接错误，已重试{max_retries}次: {str(e)}")
                    
            except requests.exceptions.Timeout as e:
                print(f"请求超时: {str(e)}")
                if attempt < max_retries - 1:
                    print(f"将在 {delay} 秒后重试...")
                    time.sleep(delay)
                else:
                    raise Exception(f"API请求超时，已重试{max_retries}次: {str(e)}")
                    
            except requests.exceptions.RequestException as e:
                print(f"请求异常: {str(e)}")
                if attempt < max_retries - 1:
                    print(f"将在 {delay} 秒后重试...")
                    time.sleep(delay)
                else:
                    raise Exception(f"API请求异常，已重试{max_retries}次: {str(e)}")
                
            except json.JSONDecodeError as e:
                print(f"JSON解析错误: {str(e)}")
                if attempt < max_retries - 1:
                    print(f"将在 {delay} 秒后重试...")
                    time.sleep(delay)
                else:
                    raise Exception(f"API响应无法解析为JSON，已重试{max_retries}次: {str(e)}")
                
            except Exception as e:
                print(f"其他错误: {str(e)}")
                if attempt < max_retries - 1:
                    print(f"将在 {delay} 秒后重试...")
                    time.sleep(delay)
                else:
                    raise Exception(f"API调用时发生错误，已重试{max_retries}次: {str(e)}")
        
        # 如果所有重试都失败但没有抛出异常（不应该发生）
        print("所有API调用尝试都失败，但没有抛出异常")
        return "OCR识别失败，无法提取图片中的文字。"
    
    def _ocr_tesseract(self, image_path):
        """
        使用Tesseract进行OCR
        
        参数:
            image_path: 图像路径
            
        返回:
            提取的文本
        """
        if not self.tesseract_available:
            raise Exception("Tesseract未安装，无法使用本地OCR")
            
        # 使用pytesseract进行OCR
        text = self.pytesseract.image_to_string(
            Image.open(image_path), 
            lang='chi_sim+eng'  # 中英文识别
        )
        
        return text
    
    def _ocr_mock(self, image_path):
        """
        使用模拟数据代替真实OCR
        
        参数:
            image_path: 图像路径
            
        返回:
            模拟的OCR结果
        """
        # 获取图像信息
        try:
        except Exception as e:
            logger.error(f"发生错误: {str(e)}")
            image = Image.open(image_path)
            width, height = image.size
            mode = image.mode
            
            # 构建模拟文本
            mock_text = f"""OCR模拟识别结果:

图像尺寸: {width}x{height}
图像模式: {mode}

识别的文本内容:
-------------------
符号:
逗号、句号。问号？感叹号！

1234567890
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
-------------------

【此为模拟数据，非真实OCR结果】"""
            return mock_text
            
        except Exception as e:
            return f"无法读取图像信息: {str(e)}\n【此为模拟数据】"

# 测试代码
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("用法: python complete_ocr_fix.py <图像路径> [ocr方法]")
        print("可用的OCR方法: qwen, tesseract, mock（默认）")
        sys.exit(1)
    
    image_path = sys.argv[1]
    method = sys.argv[2] if len(sys.argv) > 2 else "mock"
    
    ocr_service = OcrService()
    result = ocr_service.process_image(image_path, method)
    
    if result["success"]:
        print(f"OCR成功 (使用{result['method']}方法)")
        print("-" * 50)
        print(result["text"])
        print("-" * 50)
    else:
        print(f"OCR失败: {result['error']}") 