"""
全面修复app.py文件中的所有缩进和格式错误
"""

def fix_all_errors():
    try:
        # 读取app.py文件
        with open('app.py', 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        fixed_lines = []
        i = 0
        while i < len(lines):
            line = lines[i]
            
            # 修复第778行附近可能的缩进错误 - "书写分析" 部分
            if i >= 775 and i <= 785 and '"书写分析"' in line and line.strip().startswith('"书写分析"'):
                leading_spaces = len(line) - len(line.lstrip())
                if leading_spaces != 16:  # 应该有16个空格 (4个缩进单位)
                    fixed_line = ' ' * 16 + line.lstrip()
                    fixed_lines.append(fixed_line)
                    print(f"修复第{i+1}行缩进错误: {line.strip()}")
                else:
                    fixed_lines.append(line)
            
            # 修复第1010-1011行的缩进错误 - conn.commit()和logger.info部分
            elif i >= 1009 and i <= 1011 and ('conn.commit()' in line or 'logger.info' in line):
                # 前面的缩进应该是12个空格（3个缩进单位）
                if line.strip().startswith('conn.commit()') or 'logger.info' in line:
                    fixed_line = ' ' * 12 + line.lstrip()
                    fixed_lines.append(fixed_line)
                    print(f"修复第{i+1}行缩进错误: {line.strip()}")
                else:
                    fixed_lines.append(line)
            
            # 在correction.html路由定义后添加空行，如果没有的话
            elif i >= 1090 and i <= 1095 and '# 展示评分结果' in line:
                # 查看上一行是否为空行
                if i > 0 and lines[i-1].strip() != '':
                    fixed_lines.append('\n')  # 添加一个空行
                    print(f"在第{i}行前添加空行")
                fixed_lines.append(line)
            
            # 其他行保持不变
            else:
                fixed_lines.append(line)
            
            i += 1
        
        # 写回文件
        with open('app.py', 'w', encoding='utf-8') as file:
            file.writelines(fixed_lines)
        
        print("成功修复app.py文件中的所有缩进和格式错误!")
        return True
    except Exception as e:
        print(f"修复过程中出错: {str(e)}")
        return False

if __name__ == "__main__":
    fix_all_errors() 