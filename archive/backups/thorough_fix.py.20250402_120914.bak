#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
彻底重写脚本，确保文件没有BOM标记
"""

import os
import sys
import shutil

def thorough_fix(filename, output_filename):
    """
    完全重写文件，确保没有BOM标记和未终止的字符串
    """
    try:
        # 读取原始文件内容，跳过BOM
        with open(filename, 'rb') as f:
            content = f.read()
        
        # 解码
        if content.startswith(b'\xef\xbb\xbf'):  # 移除BOM
            content = content[3:]
            print("检测到BOM标记并移除")
        
        # 尝试解码
        try:
            text = content.decode('utf-8')
        except UnicodeDecodeError:
            try:
                text = content.decode('utf-8-sig')
            except:
                text = content.decode('gbk', errors='replace')
        
        # 创建新文件，完全重写内容
        with open(output_filename, 'w', encoding='utf-8') as f:
            # 写入编码声明
            f.write("#!/usr/bin/env python\n")
            f.write("# -*- coding: utf-8 -*-\n\n")
            
            # 添加基本导入语句
            f.write("import os\n")
            f.write("import json\n")
            f.write("import logging\n")
            f.write("from flask import Flask, render_template, request, jsonify, send_from_directory\n")
            f.write("from flask_cors import CORS\n\n")
            
            # 添加MIN_CHARS常量
            f.write("# 最小字符数要求\n")
            f.write("MIN_CHARS = 500\n\n")
            
            # 添加分数转换函数 - 注意：小心处理三引号和引号嵌套
            f.write("# 辅助函数：确保分数是字符串类型\n")
            f.write("def to_string(value):\n")
            f.write("    \"\"\"将任何值转换为字符串\"\"\"\n")
            f.write("    if value is None:\n")
            f.write("        return \"\"\n")
            f.write("    if isinstance(value, str):\n")
            f.write("        return value.strip()\n")
            f.write("    else:\n")
            f.write("        return str(value)\n\n")
            
            f.write("# 辅助函数：标准化分数字段\n")
            f.write("def normalize_scores(result):\n")
            f.write("    \"\"\"确保所有分数字段以字符串形式返回\"\"\"\n")
            f.write("    if not isinstance(result, dict):\n")
            f.write("        return result\n")
            f.write("        \n")
            f.write("    score_fields = [\n")
            f.write("        'content_score', 'language_score', 'structure_score', \n")
            f.write("        'writing_score', 'total_score', '总分'\n")
            f.write("    ]\n")
            f.write("    \n")
            f.write("    for field in score_fields:\n")
            f.write("        if field in result and result[field] is not None:\n")
            f.write("            result[field] = to_string(result[field])\n")
            f.write("            \n")
            f.write("    # 处理分项得分\n")
            f.write("    if 'sub_item_scores' in result and isinstance(result['sub_item_scores'], dict):\n")
            f.write("        for key, value in result['sub_item_scores'].items():\n")
            f.write("            result['sub_item_scores'][key] = to_string(value)\n")
            f.write("    \n")
            f.write("    # 处理分项得分的中文版本\n")
            f.write("    if '分项得分' in result and isinstance(result['分项得分'], dict):\n")
            f.write("        for key, value in result['分项得分'].items():\n")
            f.write("            result['分项得分'][key] = to_string(value)\n")
            f.write("    \n")
            f.write("    return result\n\n")
            
            # 提取原始文件中的Flask应用和路由部分
            app_part = """
# 创建Flask应用
app = Flask(__name__)
CORS(app)
print("已应用基本CORS配置")

# 设置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
"""
            
            # 提取路由部分，修复乱码部分
            routes_part = """
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/test')
def test():
    return render_template('test_upload.html')

@app.route('/correct', methods=['POST'])
def correct():
    try:
        # 获取JSON数据
        data = request.get_json()
        
        # 提取文章内容
        article = data.get('article', '')
        
        # 简单检查字数
        if len(article) < MIN_CHARS:
            response = {
                "error": f"文章长度不足，最小要求{MIN_CHARS}字符",
                "content_score": "0",
                "language_score": "0",
                "structure_score": "0",
                "writing_score": "0", 
                "total_score": "0",
                "comments": "文章长度不足",
                "strengths": [],
                "weaknesses": ["文章太短"],
                "suggestions": ["增加内容至少达到500字符"]
            }
            return jsonify(normalize_scores(response))
        
        # 模拟AI评分结果
        # 在实际环境中，这里会调用AI评分接口
        result = {
            "content_score": 22,
            "language_score": 17,
            "structure_score": 8.5,
            "writing_score": 4.5,
            "total_score": 45,
            "总分": 45,
            "comments": "这是一篇结构清晰、论述合理的文章。",
            "strengths": ["观点明确", "论述清晰"],
            "weaknesses": ["细节不足"],
            "suggestions": ["建议增加具体例子"],
            "level": "A",
            "sub_item_scores": {
                "论点": 22,
                "结构": 17,
                "语言": 8.5,
                "文笔": 4.5
            },
            "分项得分": {
                "论点": 22,
                "结构": 17,
                "语言": 8.5,
                "文笔": 4.5
            }
        }
        
        # 确保所有分数返回为字符串类型
        result = normalize_scores(result)
        
        return jsonify(result)
    
    except Exception as e:
        logger.error(f"批改过程中出错: {str(e)}")
        error_result = {
            "error": f"批改过程中出错: {str(e)}",
            "content_score": "0",
            "language_score": "0",
            "structure_score": "0",
            "writing_score": "0",
            "total_score": "0",
            "comments": "服务器处理错误"
        }
        return jsonify(normalize_scores(error_result))
"""
            
            # 添加主程序
            main_part = """
if __name__ == '__main__':
    print("作文批改系统服务启动...")
    print("访问地址：http://127.0.0.1:5000")
    app.run(host='0.0.0.0', debug=True)
"""
            
            # 写入提取的部分
            f.write(app_part)
            f.write(routes_part)
            f.write(main_part)
            
        print(f"已创建无BOM标记的新文件: {output_filename}")
        return True
    
    except Exception as e:
        print(f"处理文件时出错: {e}")
        return False

if __name__ == "__main__":
    # 默认参数
    input_file = "server_external.py"
    output_file = "clean_server.py"
    
    # 使用命令行参数
    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    if len(sys.argv) > 2:
        output_file = sys.argv[2]
    
    # 备份原始文件
    backup = input_file + ".backup"
    if not os.path.exists(backup):
        shutil.copy2(input_file, backup)
        print(f"已创建备份: {backup}")
    
    # 执行修复
    if thorough_fix(input_file, output_file):
        print(f"处理成功，请使用命令运行服务器: python {output_file}") 