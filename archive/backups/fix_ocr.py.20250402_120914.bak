#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import base64
import requests
from dotenv import load_dotenv
from PIL import Image

# 加载环境变量
load_dotenv()

DASHSCOPE_API_KEY = os.getenv("DASHSCOPE_API_KEY")
DASHSCOPE_MODEL = os.getenv("DASHSCOPE_MODEL", "qwen-vl-max")

def extract_text_from_image(image_path):
    """使用阿里千问-VL模型提取图片文本"""
    
    if not DASHSCOPE_API_KEY:
        print("错误: 未设置DASHSCOPE_API_KEY环境变量")
        return None
        
    # 确保图片路径存在  
    if not os.path.exists(image_path):
        print(f"错误: 图片不存在 - {image_path}")
        return None
    
    print(f"正在处理图片: {image_path}")
    
    # 转换图片为JPEG格式(RGB模式)
    try:
        # 打开图片
        image = Image.open(image_path)
        print(f"图片已打开, 模式: {image.mode}, 尺寸: {image.size}")
        
        # 转为RGB模式
        if image.mode != 'RGB':
            print(f"转换图片从 {image.mode} 到 RGB 模式")
            image = image.convert('RGB')
            
        # 保存为临时JPEG  
        temp_path = f"{image_path}_temp.jpg"
        image.save(temp_path, 'JPEG', quality=95)
        image.close()
        
        # 使用临时文件
        with open(temp_path, "rb") as f:
            image_content = f.read()
            
        print(f"图片大小: {len(image_content)/1024:.2f} KB")
            
        # 转Base64
        image_base64 = base64.b64encode(image_content).decode('utf-8')
        
        # 调用API
        url = "https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DASHSCOPE_API_KEY}"
        }
        
        # 简化请求体
        payload = {
            "model": DASHSCOPE_MODEL,
            "input": {
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {"image": f"data:image/jpeg;base64,{image_base64}"},
                            {"text": "请识别图片中的所有文字并返回，不要加任何解释。"}
                        ]
                    }
                ]
            },
            "parameters": {
                "result_format": "message",
                "max_tokens": 2000,
                "temperature": 0.01,
                "top_p": 0.8
            }
        }
        
        print(f"正在调用千问API, 模型: {DASHSCOPE_MODEL}")
        
        # 发送请求
        response = requests.post(url, headers=headers, json=payload, timeout=(15, 180))
        print(f"API响应状态码: {response.status_code}")
        
        # 检查响应
        if response.status_code != 200:
            print(f"API调用失败: {response.text}")
            return None
            
        result = response.json()
        print("API调用成功")
        
        # 提取文本
        content = result.get("output", {}).get("choices", [{}])[0].get("message", {}).get("content", "")
        if not content:
            print("未返回文本内容")
            return None
            
        print(f"提取的文本长度: {len(content)}")
        print("-" * 50)
        print(content[:300] + "..." if len(content) > 300 else content)
        print("-" * 50)
        
        # 清理临时文件
        try:
            os.remove(temp_path)
        except:
            pass
            
        return content
        
    except Exception as e:
        print(f"错误: {str(e)}")
        return None

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("用法: python fix_ocr.py <图片路径>")
        sys.exit(1)
        
    image_path = sys.argv[1]
    result = extract_text_from_image(image_path)
    
    if result:
        print("OCR处理成功!")
    else:
        print("OCR处理失败!") 