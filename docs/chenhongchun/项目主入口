The main application entry point for your project is app.py, located in the project root directory. This serves as the primary entry point for starting the application. Here's what you need to know:
app.py is the main entry file that:
Sets up the correct Python path
Loads environment variables
Imports and creates the Flask application using create_app() from the app package
Provides a development server when run directly
The actual application configuration and initialization happens in app/__init__.py, which:
Defines the create_app() function that initializes the Flask application
Sets up logging, registers blueprints, initializes database connections
Configures Celery for asynchronous tasks
Loads configurations based on the environment
For Celery workers, there are two relevant files:
app/tasks/celery_app.py: Contains the Celery application instance and worker initialization
scripts/start_workers.py: A helper script for starting Celery workers with different queues
To start the application:
Run python app.py to start the web server
For Celery workers, run celery -A app.tasks.celery_app:celery_app worker --loglevel=info
For starting all services together, there is a start_all.py script that can start both the web server and Celery workers simultaneously.


---

### 项目核心入口说明

**主入口文件**：`app.py`（位于项目根目录）  
**核心作用**：
1. **环境初始化**
   - 设置Python路径
   - 加载环境变量 (通过`.env`文件)
2. **应用创建**
   - 从`app`包导入`create_app()`函数
   - 初始化Flask应用实例
3. **开发服务器**
   - 直接运行时启动调试服务器
   - 访问地址默认：`http://localhost:5000`

---

### 应用配置架构 (`app/__init__.py`)

```python
def create_app():
    """Flask应用工厂函数"""
    app = Flask(__name__)
    
    # 核心配置流程
    app.config.from_object(f"config.{os.getenv('FLASK_ENV', 'Development')}Config")
    
    # 初始化组件
    init_logging(app)          # 📝 日志系统
    register_blueprints(app)   # 🔵 路由蓝图
    init_database(app)         # 🗄️ 数据库连接
    configure_celery(app)      # 🚀 Celery异步任务
    
    return app
```

---

### Celery工作者管理

| 文件路径                      | 功能说明                     |
|-----------------------------|----------------------------|
| `app/tasks/celery_app.py`    | Celery应用实例及工作进程初始化 |
| `scripts/start_workers.py`   | 多队列工作者启动脚本          |

**启动方式对比**：
```bash
# 标准启动（默认队列）
celery -A app.tasks.celery_app:celery_app worker --loglevel=info

# 通过脚本启动（带优先级队列）
python scripts/start_workers.py \
  --queues high_priority,default_priority \
  --concurrency 4
```

---

### 服务启动指南

**1. Web服务器启动**
```bash
FLASK_ENV=development python app.py
```

**2. Celery工作者启动**（独立模式）
```bash
# 普通任务工作者
celery -A app.tasks.celery_app:celery_app worker -Q default_priority -l info

# 紧急任务工作者
celery -A app.tasks.celery_app:celery_app worker -Q high_priority -l info --prefetch-multiplier=1
```

**3. 全服务启动**（开发模式）
```bash
# 通过集成脚本启动Web服务和所有工作者
python start_all.py \
  --web \          # 启动Web服务器
  --celery \       # 启动Celery工作者
  --queues "high,default" \  # 指定工作队列
  --debug          # 开启调试模式
```

---

### 环境配置优先级
```python
# 配置加载顺序（高→低）
1. 环境变量 (os.getenv)
2. .env文件
3. config/ 目录下的配置类
4. 默认安全值
```

---

通过此架构设计，实现了：  
✅ 配置与代码分离  
✅ 模块化服务管理  
✅ 环境差异化部署  
✅ 开发/生产配置自动切换